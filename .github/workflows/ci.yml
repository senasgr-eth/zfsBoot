name: NSBoot CI/CD Pipeline

on:
  push:
    branches: [ main, develop, modernize ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  DOCKER_IMAGE: nsboot/nsboot
  DOCKER_TAG: ${{ github.sha }}

jobs:
  lint-lua:
    name: Lint Lua Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Lua and luacheck
        run: |
          sudo apt-get update
          sudo apt-get install -y lua5.3 liblua5.3-dev luarocks
          sudo luarocks install luacheck
      
      - name: Run luacheck
        run: |
          luacheck bin/ src/ api/ --no-color --formatter plain --ignore 113 --ignore 212
        continue-on-error: true
  
  lint-frontend:
    name: Lint Frontend Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check if frontend exists
        id: check_frontend
        run: |
          if [ -d "frontend" ] && [ -f "frontend/package.json" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Setup Node.js
        if: steps.check_frontend.outputs.exists == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install dependencies
        if: steps.check_frontend.outputs.exists == 'true'
        working-directory: frontend
        run: npm install
      
      - name: Run ESLint
        if: steps.check_frontend.outputs.exists == 'true'
        working-directory: frontend
        run: npm run lint || echo "Linting completed with warnings"
        continue-on-error: true
      
      - name: Run type check
        if: steps.check_frontend.outputs.exists == 'true'
        working-directory: frontend
        run: npm run type-check || echo "Type check completed with warnings"
        continue-on-error: true
      
      - name: Skip frontend lint
        if: steps.check_frontend.outputs.exists == 'false'
        run: echo "Frontend directory not found, skipping lint"

  test-lua:
    name: Test Lua Components
    runs-on: ubuntu-latest
    
    steps:
        run: |
          sudo apt-get update
          sudo apt-get install -y lua5.3 liblua5.3-dev lua-json lua-socket lua-posix lua-cjson
      
      - name: Run Lua tests
        run: |
          if [ -d "test" ]; then
            lua5.3 test/run_tests.lua || echo "No tests found"
{{ ... }}

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check if frontend exists
        id: check_frontend
        run: |
          if [ -d "frontend" ] && [ -f "frontend/package.json" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Setup Node.js
        if: steps.check_frontend.outputs.exists == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install dependencies
        if: steps.check_frontend.outputs.exists == 'true'
        working-directory: frontend
        run: npm install
      
      - name: Run unit tests
        if: steps.check_frontend.outputs.exists == 'true'
        working-directory: frontend
        run: npm run test:unit || echo "No tests configured yet"
        continue-on-error: true
      
      - name: Run E2E tests
        if: steps.check_frontend.outputs.exists == 'true'
        working-directory: frontend
        run: npm run test:e2e || echo "No E2E tests configured yet"
        continue-on-error: true
      
      - name: Skip frontend tests
        if: steps.check_frontend.outputs.exists == 'false'
        run: echo "Frontend directory not found, skipping tests"

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint-lua, test-lua]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/nsboot-image.tar
      
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: nsboot-docker-image
          path: /tmp/nsboot-image.tar
          retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-docker
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: nsboot-docker-image
          path: /tmp
      
      - name: Load Docker image
        run: docker load --input /tmp/nsboot-image.tar
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  publish-docker:
    name: Publish Docker Image
    runs-on: ubuntu-latest
    needs: [build-docker, security-scan]
    if: github.event_name == 'release' || github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: nsboot-docker-image
          path: /tmp
      
      - name: Load Docker image
        run: docker load --input /tmp/nsboot-image.tar
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Tag and push Docker image
        run: |
          docker tag ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} ${{ env.DOCKER_IMAGE }}:latest
          docker push ${{ env.DOCKER_IMAGE }}:latest
          
          if [ "${{ github.event_name }}" == "release" ]; then
            VERSION=${GITHUB_REF#refs/tags/}
            docker tag ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} ${{ env.DOCKER_IMAGE }}:${VERSION}
            docker push ${{ env.DOCKER_IMAGE }}:${VERSION}
          fi

  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install MkDocs
        run: |
          pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin
      
      - name: Build documentation
        run: mkdocs build
      
      - name: Upload documentation artifact
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: site/
          retention-days: 7

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: build-docs
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install MkDocs
        run: |
          pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin
      
      - name: Deploy to GitHub Pages
        run: mkdocs gh-deploy --force
