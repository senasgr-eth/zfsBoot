{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"NSBoot - Modern Diskless Boot System","text":"Free, Open-Source Alternative to CCBoot <p>Diskless boot solution for Internet cafes, schools, and labs</p>"},{"location":"#overview","title":"Overview","text":"<p>NSBoot is a modern, production-ready diskless boot system that enables you to boot multiple workstations from a central server without local hard drives. Built on proven technologies like ZFS, iSCSI, and PXE boot, NSBoot provides:</p> <ul> <li>Zero Local Storage: Boot Windows, Linux, and macOS without hard drives</li> <li>Instant Recovery: Restart to restore system state automatically</li> <li>Centralized Management: Modern web UI for managing images and clients</li> <li>High Performance: ZFS with caching for fast I/O operations</li> <li>Scalable: Support for 100+ clients with proper hardware</li> </ul>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#modern-web-interface","title":"\ud83d\ude80 Modern Web Interface","text":"<ul> <li>Responsive Vue.js 3 dashboard with dark mode</li> <li>Real-time monitoring and statistics</li> <li>Drag-and-drop image uploads</li> <li>Mobile-friendly design</li> </ul>"},{"location":"#zfs-storage","title":"\ud83d\udcbe ZFS Storage","text":"<ul> <li>Advanced filesystem with compression and deduplication</li> <li>Snapshot support for instant backups</li> <li>L2ARC and ZIL for performance</li> <li>Built-in data integrity checking</li> </ul>"},{"location":"#enterprise-security","title":"\ud83d\udd12 Enterprise Security","text":"<ul> <li>Optional OAuth2/OIDC authentication</li> <li>IPsec encryption for iSCSI traffic</li> <li>Rate limiting and DDoS protection</li> <li>Comprehensive audit logging</li> </ul>"},{"location":"#monitoring-observability","title":"\ud83d\udcca Monitoring &amp; Observability","text":"<ul> <li>Prometheus metrics integration</li> <li>Pre-built Grafana dashboards</li> <li>Real-time alerts for issues</li> <li>Performance tracking</li> </ul>"},{"location":"#container-ready","title":"\ud83d\udc33 Container-Ready","text":"<ul> <li>Docker and Docker Compose support</li> <li>Kubernetes Helm charts</li> <li>Easy deployment and scaling</li> <li>Minimal resource footprint (&lt;500MB)</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code># Clone the repository\ngit clone https://github.com/vkornilyev1988/NSBoot-.git\ncd NSBoot-\n\n# Start with Docker Compose\ndocker-compose up -d\n\n# Access the web interface\nopen http://localhost\n</code></pre>"},{"location":"#architecture","title":"Architecture","text":"graph TD     A[Client PXE Boot] --&gt; B[DHCP Server]     B --&gt; C[TFTP Server]     C --&gt; D[iPXE Boot Loader]     D --&gt; E[iSCSI Target]     E --&gt; F[ZFS Storage Pool]     F --&gt; G[OS Image]     G --&gt; H[Client Boots OS]      I[Web UI] --&gt; J[REST API]     J --&gt; K[Lua Backend]     K --&gt; F      L[Monitoring] --&gt; M[Prometheus]     M --&gt; N[Grafana]     N --&gt; K"},{"location":"#use-cases","title":"Use Cases","text":""},{"location":"#internet-cafes-gaming-centers","title":"Internet Cafes &amp; Gaming Centers","text":"<ul> <li>No hard drives = no unauthorized changes</li> <li>Quick system restoration on reboot</li> <li>Centralized game library management</li> <li>Reduced hardware costs</li> </ul>"},{"location":"#schools-computer-labs","title":"Schools &amp; Computer Labs","text":"<ul> <li>Consistent environment across all machines</li> <li>Easy software deployment</li> <li>Protection against student modifications</li> <li>Simplified maintenance</li> </ul>"},{"location":"#enterprise-environments","title":"Enterprise Environments","text":"<ul> <li>Thin client deployments</li> <li>Disaster recovery scenarios</li> <li>Development/testing environments</li> <li>Secure workstations</li> </ul>"},{"location":"#system-requirements","title":"System Requirements","text":""},{"location":"#server","title":"Server","text":"<ul> <li>CPU: 4+ cores (8+ recommended for 50+ clients)</li> <li>RAM: 16GB minimum (32GB+ recommended)</li> <li>Storage: SSD for ZFS pool (NVMe recommended)</li> <li>Network: Gigabit Ethernet (10GbE for 100+ clients)</li> <li>OS: Ubuntu 20.04+ or Debian 11+</li> </ul>"},{"location":"#clients","title":"Clients","text":"<ul> <li>Network Boot: PXE or UEFI network boot support</li> <li>RAM: 4GB minimum (depends on OS)</li> <li>Network: Gigabit Ethernet recommended</li> </ul>"},{"location":"#comparison-with-alternatives","title":"Comparison with Alternatives","text":"Feature NSBoot CCBoot FOG Project Tiny PXE License AGPL-3.0 Proprietary GPL-3.0 GPL-3.0 Web UI \u2705 Modern \u2705 Basic \u2705 Basic \u274c ZFS Support \u2705 \u274c \u274c \u274c Multi-OS \u2705 \u2705 \u2705 \u2705 Docker \u2705 \u274c \u26a0\ufe0f Limited \u274c Monitoring \u2705 Prometheus \u274c \u274c \u274c API \u2705 REST \u274c \u26a0\ufe0f Limited \u274c Cost Free $$ Free Free"},{"location":"#community-support","title":"Community &amp; Support","text":"<ul> <li>GitHub: Issues &amp; Discussions</li> <li>Documentation: Full Documentation</li> <li>Docker Hub: Official Images</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! See our Contributing Guide for details.</p>"},{"location":"#license","title":"License","text":"<p>NSBoot is licensed under the GNU Affero General Public License v3.0.</p> <p>Made with \u2764\ufe0f by the NSBoot community</p>"},{"location":"admin/load-balancing/","title":"Load Balancing Configuration","text":"<p>Guide for setting up load balancing across multiple NSBoot servers.</p>"},{"location":"admin/load-balancing/#overview","title":"Overview","text":"<p>Load balancing distributes client boot requests across multiple NSBoot servers for: - High availability - No single point of failure - Scalability - Handle 1000+ concurrent boots - Performance - Distribute load evenly</p>"},{"location":"admin/load-balancing/#architecture","title":"Architecture","text":"graph TB     subgraph \"Clients\"         C1[Client 1]         C2[Client 2]         C3[Client N]     end      LB[Load BalancerNginx/HAProxy]      subgraph \"NSBoot Cluster\"         NS1[NSBoot 1]         NS2[NSBoot 2]         NS3[NSBoot 3]     end      subgraph \"Shared Storage\"         ZFS[ZFS PoolReplicated]     end      C1 &amp; C2 &amp; C3 --&gt; LB     LB --&gt; NS1 &amp; NS2 &amp; NS3     NS1 &amp; NS2 &amp; NS3 --&gt; ZFS"},{"location":"admin/load-balancing/#nginx-load-balancing","title":"Nginx Load Balancing","text":""},{"location":"admin/load-balancing/#configuration","title":"Configuration","text":"<p>Use the provided configuration:</p> <pre><code># Copy load balancing config\ncp nginx/load-balancing.conf /etc/nginx/sites-available/nsboot-lb\n\n# Enable site\nln -s /etc/nginx/sites-available/nsboot-lb /etc/nginx/sites-enabled/\n\n# Test configuration\nnginx -t\n\n# Reload\nsystemctl reload nginx\n</code></pre>"},{"location":"admin/load-balancing/#load-balancing-methods","title":"Load Balancing Methods","text":"<p>1. Round Robin (Default) <pre><code>upstream nsboot_backend {\n    server nsboot-1:80;\n    server nsboot-2:80;\n    server nsboot-3:80;\n}\n</code></pre></p> <p>2. Least Connections (Recommended) <pre><code>upstream nsboot_backend {\n    least_conn;\n    server nsboot-1:80;\n    server nsboot-2:80;\n    server nsboot-3:80;\n}\n</code></pre></p> <p>3. IP Hash (Sticky Sessions) <pre><code>upstream nsboot_backend {\n    ip_hash;\n    server nsboot-1:80;\n    server nsboot-2:80;\n    server nsboot-3:80;\n}\n</code></pre></p> <p>4. Weighted <pre><code>upstream nsboot_backend {\n    server nsboot-1:80 weight=3;  # More powerful\n    server nsboot-2:80 weight=2;\n    server nsboot-3:80 weight=1;\n}\n</code></pre></p>"},{"location":"admin/load-balancing/#health-checks","title":"Health Checks","text":"<pre><code>upstream nsboot_backend {\n    server nsboot-1:80 max_fails=3 fail_timeout=30s;\n    server nsboot-2:80 max_fails=3 fail_timeout=30s;\n    server nsboot-3:80 max_fails=3 fail_timeout=30s;\n\n    # Active health check (requires nginx-plus or module)\n    check interval=3000 rise=2 fall=3 timeout=1000 type=http;\n    check_http_send \"GET /health HTTP/1.0\\r\\n\\r\\n\";\n    check_http_expect_alive http_2xx http_3xx;\n}\n</code></pre>"},{"location":"admin/load-balancing/#haproxy-load-balancing","title":"HAProxy Load Balancing","text":""},{"location":"admin/load-balancing/#configuration_1","title":"Configuration","text":"<pre><code>global\n    log /dev/log local0\n    maxconn 4096\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    log global\n    mode http\n    option httplog\n    option dontlognull\n    timeout connect 5000\n    timeout client 50000\n    timeout server 50000\n\nfrontend nsboot_frontend\n    bind *:80\n    default_backend nsboot_backend\n\n    # ACLs\n    acl is_websocket hdr(Upgrade) -i WebSocket\n    acl is_api path_beg /api/\n\n    # Use backend\n    use_backend nsboot_websocket if is_websocket\n    use_backend nsboot_backend if is_api\n    default_backend nsboot_backend\n\nbackend nsboot_backend\n    balance leastconn\n    option httpchk GET /health\n\n    server nsboot-1 192.168.1.101:80 check inter 3s rise 2 fall 3\n    server nsboot-2 192.168.1.102:80 check inter 3s rise 2 fall 3\n    server nsboot-3 192.168.1.103:80 check inter 3s rise 2 fall 3\n\nbackend nsboot_websocket\n    balance source  # Sticky sessions for WebSocket\n    option httpchk GET /health\n\n    server nsboot-1 192.168.1.101:80 check inter 3s\n    server nsboot-2 192.168.1.102:80 check inter 3s\n    server nsboot-3 192.168.1.103:80 check inter 3s\n</code></pre>"},{"location":"admin/load-balancing/#kubernetes-load-balancing","title":"Kubernetes Load Balancing","text":""},{"location":"admin/load-balancing/#service-configuration","title":"Service Configuration","text":"<pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: nsboot\n  namespace: nsboot\nspec:\n  type: LoadBalancer\n  sessionAffinity: ClientIP  # Sticky sessions\n  sessionAffinityConfig:\n    clientIP:\n      timeoutSeconds: 3600\n  ports:\n  - name: http\n    port: 80\n    targetPort: 80\n  selector:\n    app: nsboot\n</code></pre>"},{"location":"admin/load-balancing/#ingress-with-load-balancing","title":"Ingress with Load Balancing","text":"<pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: nsboot\n  annotations:\n    nginx.ingress.kubernetes.io/affinity: \"cookie\"\n    nginx.ingress.kubernetes.io/session-cookie-name: \"nsboot-session\"\n    nginx.ingress.kubernetes.io/session-cookie-expires: \"3600\"\n    nginx.ingress.kubernetes.io/session-cookie-max-age: \"3600\"\nspec:\n  ingressClassName: nginx\n  rules:\n  - host: nsboot.example.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: nsboot\n            port:\n              number: 80\n</code></pre>"},{"location":"admin/load-balancing/#session-persistence","title":"Session Persistence","text":""},{"location":"admin/load-balancing/#cookie-based-recommended","title":"Cookie-based (Recommended)","text":"<pre><code>upstream nsboot_backend {\n    server nsboot-1:80;\n    server nsboot-2:80;\n    server nsboot-3:80;\n\n    sticky cookie nsboot-session expires=1h domain=.example.com path=/;\n}\n</code></pre>"},{"location":"admin/load-balancing/#ip-based","title":"IP-based","text":"<pre><code>upstream nsboot_backend {\n    ip_hash;\n    server nsboot-1:80;\n    server nsboot-2:80;\n    server nsboot-3:80;\n}\n</code></pre>"},{"location":"admin/load-balancing/#shared-storage","title":"Shared Storage","text":"<p>All NSBoot instances must access the same ZFS pool:</p>"},{"location":"admin/load-balancing/#option-1-nfs-export","title":"Option 1: NFS Export","text":"<pre><code># On primary server\nzfs set sharenfs=on nsboot0/images\n\n# On secondary servers\nmount -t nfs primary-server:/nsboot0/images /srv/images\n</code></pre>"},{"location":"admin/load-balancing/#option-2-zfs-replication","title":"Option 2: ZFS Replication","text":"<pre><code># Continuous replication\nzfs send -R nsboot0/images@latest | ssh nsboot-2 zfs receive -F nsboot0/images\n</code></pre>"},{"location":"admin/load-balancing/#option-3-shared-san","title":"Option 3: Shared SAN","text":"<ul> <li>Use iSCSI or FC SAN</li> <li>All servers access same storage</li> <li>Requires cluster filesystem (GFS2, OCFS2)</li> </ul>"},{"location":"admin/load-balancing/#monitoring-load-balancer","title":"Monitoring Load Balancer","text":""},{"location":"admin/load-balancing/#nginx-stats","title":"Nginx Stats","text":"<pre><code>location /nginx_status {\n    stub_status on;\n    access_log off;\n    allow 127.0.0.1;\n    deny all;\n}\n</code></pre>"},{"location":"admin/load-balancing/#haproxy-stats","title":"HAProxy Stats","text":"<pre><code>listen stats\n    bind *:8404\n    stats enable\n    stats uri /stats\n    stats refresh 30s\n    stats admin if TRUE\n</code></pre>"},{"location":"admin/load-balancing/#prometheus-metrics","title":"Prometheus Metrics","text":"<pre><code># Scrape load balancer metrics\nscrape_configs:\n  - job_name: 'nginx-lb'\n    static_configs:\n      - targets: ['lb-server:9113']\n</code></pre>"},{"location":"admin/load-balancing/#testing-load-balancing","title":"Testing Load Balancing","text":"<pre><code># Test round-robin\nfor i in {1..10}; do\n  curl -s http://nsboot.example.com/api/system/info | jq -r '.hostname'\ndone\n\n# Test with session\ncurl -c cookies.txt http://nsboot.example.com/api/auth/login\nfor i in {1..10}; do\n  curl -b cookies.txt http://nsboot.example.com/api/system/info | jq -r '.hostname'\ndone\n</code></pre>"},{"location":"admin/load-balancing/#troubleshooting","title":"Troubleshooting","text":""},{"location":"admin/load-balancing/#uneven-load-distribution","title":"Uneven Load Distribution","text":"<p>Check: - Load balancing algorithm - Server weights - Health check status</p> <p>Fix: <pre><code># Use least_conn instead of round_robin\nupstream nsboot_backend {\n    least_conn;\n    server nsboot-1:80;\n    server nsboot-2:80;\n}\n</code></pre></p>"},{"location":"admin/load-balancing/#session-loss","title":"Session Loss","text":"<p>Check: - Session persistence configuration - Cookie settings - WebSocket sticky sessions</p> <p>Fix: <pre><code># Enable sticky sessions\nsticky cookie nsboot-session expires=1h;\n</code></pre></p>"},{"location":"admin/load-balancing/#backend-server-down","title":"Backend Server Down","text":"<p>Check: <pre><code># Nginx\nnginx -t\nsystemctl status nginx\n\n# Check upstream\ncurl http://nsboot-1/health\n</code></pre></p> <p>Fix: - Automatic with health checks - Failed servers removed from pool - Restored when healthy</p>"},{"location":"admin/load-balancing/#best-practices","title":"Best Practices","text":"<ol> <li>Use Health Checks - Automatic failover</li> <li>Sticky Sessions - For WebSocket and auth</li> <li>Connection Pooling - Reduce overhead</li> <li>Monitoring - Track backend health</li> <li>Graceful Shutdown - Drain connections</li> <li>SSL Termination - At load balancer</li> <li>Rate Limiting - Protect backends</li> <li>Caching - Reduce backend load</li> </ol>"},{"location":"admin/load-balancing/#performance-tuning","title":"Performance Tuning","text":"<pre><code># Increase worker connections\nworker_processes auto;\nworker_connections 4096;\n\n# Keepalive to backends\nupstream nsboot_backend {\n    server nsboot-1:80;\n    server nsboot-2:80;\n    keepalive 32;\n    keepalive_timeout 60s;\n}\n\n# Enable caching\nproxy_cache_path /var/cache/nginx levels=1:2 keys_zone=nsboot:10m;\nproxy_cache nsboot;\n</code></pre>"},{"location":"admin/load-balancing/#next-steps","title":"Next Steps","text":"<ul> <li>High Availability</li> <li>Performance Tuning</li> <li>Monitoring</li> </ul>"},{"location":"api/authentication/","title":"API Authentication","text":"<p>NSBoot API uses JWT (JSON Web Token) for authentication.</p>"},{"location":"api/authentication/#overview","title":"Overview","text":"<p>All API endpoints (except <code>/api/auth/*</code> and <code>/api/health</code>) require authentication using a JWT token.</p>"},{"location":"api/authentication/#getting-a-token","title":"Getting a Token","text":""},{"location":"api/authentication/#login","title":"Login","text":"<p>Endpoint: <code>POST /api/auth/login</code></p> <p>Request: <pre><code>{\n  \"username\": \"admin\",\n  \"password\": \"your-password\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"user\": {\n    \"username\": \"admin\",\n    \"role\": \"admin\"\n  },\n  \"expires_in\": 86400\n}\n</code></pre></p>"},{"location":"api/authentication/#using-the-token","title":"Using the Token","text":"<p>Include the token in the <code>Authorization</code> header of your requests:</p> <pre><code>curl -H \"Authorization: Bearer YOUR_TOKEN\" \\\n  http://localhost/api/system/info\n</code></pre>"},{"location":"api/authentication/#javascript-example","title":"JavaScript Example","text":"<pre><code>// Login\nconst response = await fetch('/api/auth/login', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    username: 'admin',\n    password: 'password'\n  })\n})\n\nconst { token } = await response.json()\n\n// Use token for authenticated requests\nconst systemInfo = await fetch('/api/system/info', {\n  headers: {\n    'Authorization': `Bearer ${token}`\n  }\n})\n</code></pre>"},{"location":"api/authentication/#python-example","title":"Python Example","text":"<pre><code>import requests\n\n# Login\nresponse = requests.post('http://localhost/api/auth/login', json={\n    'username': 'admin',\n    'password': 'password'\n})\n\ntoken = response.json()['token']\n\n# Use token\nheaders = {'Authorization': f'Bearer {token}'}\nsystem_info = requests.get('http://localhost/api/system/info', headers=headers)\n</code></pre>"},{"location":"api/authentication/#token-refresh","title":"Token Refresh","text":"<p>Tokens expire after 24 hours by default. Refresh before expiry:</p> <p>Endpoint: <code>POST /api/auth/refresh</code></p> <p>Request: <pre><code>{\n  \"token\": \"your-current-token\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"token\": \"new-token\",\n  \"expires_in\": 86400\n}\n</code></pre></p>"},{"location":"api/authentication/#logout","title":"Logout","text":"<p>Endpoint: <code>POST /api/auth/logout</code></p> <p>Headers: <pre><code>Authorization: Bearer YOUR_TOKEN\n</code></pre></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"message\": \"Logged out successfully\"\n}\n</code></pre></p> <p>Note: Since JWT is stateless, logout only returns success. The client should discard the token.</p>"},{"location":"api/authentication/#security-best-practices","title":"Security Best Practices","text":""},{"location":"api/authentication/#1-store-tokens-securely","title":"1. Store Tokens Securely","text":"<p>Browser: - Use <code>httpOnly</code> cookies (if implementing server-side) - Or use <code>sessionStorage</code> (cleared on tab close) - Avoid <code>localStorage</code> for sensitive tokens</p> <p>Mobile: - Use secure storage (Keychain on iOS, KeyStore on Android)</p>"},{"location":"api/authentication/#2-token-expiry","title":"2. Token Expiry","text":"<ul> <li>Default: 24 hours</li> <li>Configure via <code>JWT_EXPIRY</code> environment variable</li> <li>Refresh tokens before expiry</li> </ul>"},{"location":"api/authentication/#3-https-only","title":"3. HTTPS Only","text":"<p>Always use HTTPS in production to prevent token interception.</p>"},{"location":"api/authentication/#4-environment-variables","title":"4. Environment Variables","text":"<p>Set a strong secret in production:</p> <pre><code>export JWT_SECRET=\"your-very-long-random-secret-key\"\nexport JWT_EXPIRY=86400  # 24 hours in seconds\n</code></pre>"},{"location":"api/authentication/#5-rate-limiting","title":"5. Rate Limiting","text":"<p>Login endpoint is rate-limited to prevent brute force attacks: - 5 attempts per minute per IP - 20 attempts per hour per IP</p>"},{"location":"api/authentication/#error-responses","title":"Error Responses","text":""},{"location":"api/authentication/#401-unauthorized","title":"401 Unauthorized","text":"<pre><code>{\n  \"error\": \"Unauthorized\",\n  \"message\": \"Invalid credentials\"\n}\n</code></pre>"},{"location":"api/authentication/#403-forbidden","title":"403 Forbidden","text":"<pre><code>{\n  \"error\": \"Forbidden\",\n  \"message\": \"Insufficient permissions\"\n}\n</code></pre>"},{"location":"api/authentication/#token-expired","title":"Token Expired","text":"<pre><code>{\n  \"error\": \"Unauthorized\",\n  \"message\": \"Token expired\"\n}\n</code></pre>"},{"location":"api/authentication/#roles-and-permissions","title":"Roles and Permissions","text":""},{"location":"api/authentication/#admin-role","title":"Admin Role","text":"<p>Full access to all endpoints: - System management - Image management - Client management - Settings modification</p>"},{"location":"api/authentication/#user-role-future","title":"User Role (Future)","text":"<p>Limited access: - View system info - View images - View clients - No modification permissions</p>"},{"location":"api/authentication/#default-credentials","title":"Default Credentials","text":"<p>Username: <code>admin</code> Password: <code>admin</code></p> <p>\u26a0\ufe0f Change immediately in production!</p>"},{"location":"api/authentication/#changing-password","title":"Changing Password","text":"<p>Currently, passwords are configured in the code. In production:</p> <ol> <li>Use environment variables</li> <li>Implement password change endpoint</li> <li>Use external authentication (OAuth2, LDAP)</li> </ol>"},{"location":"api/authentication/#oauth2oidc-integration","title":"OAuth2/OIDC Integration","text":"<p>For enterprise deployments, NSBoot supports OAuth2/OIDC:</p> <p>See OAuth2 Configuration for details.</p>"},{"location":"api/authentication/#api-key-authentication-future","title":"API Key Authentication (Future)","text":"<p>For service-to-service communication:</p> <pre><code>curl -H \"X-API-Key: your-api-key\" \\\n  http://localhost/api/system/info\n</code></pre>"},{"location":"api/authentication/#testing-authentication","title":"Testing Authentication","text":"<pre><code># Login\nTOKEN=$(curl -s -X POST http://localhost/api/auth/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\":\"admin\",\"password\":\"admin\"}' \\\n  | jq -r '.token')\n\n# Use token\ncurl -H \"Authorization: Bearer $TOKEN\" \\\n  http://localhost/api/system/info\n\n# Refresh token\nNEW_TOKEN=$(curl -s -X POST http://localhost/api/auth/refresh \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\\\"token\\\":\\\"$TOKEN\\\"}\" \\\n  | jq -r '.token')\n</code></pre>"},{"location":"api/authentication/#troubleshooting","title":"Troubleshooting","text":""},{"location":"api/authentication/#token-not-working","title":"Token Not Working","text":"<ol> <li>Check token format: <code>Bearer &lt;token&gt;</code></li> <li>Verify token hasn't expired</li> <li>Check server logs for details</li> </ol>"},{"location":"api/authentication/#login-fails","title":"Login Fails","text":"<ol> <li>Verify credentials</li> <li>Check rate limiting</li> <li>Ensure API is accessible</li> </ol>"},{"location":"api/authentication/#cors-issues","title":"CORS Issues","text":"<p>Configure CORS in nginx: <pre><code>add_header Access-Control-Allow-Origin * always;\nadd_header Access-Control-Allow-Headers \"Authorization, Content-Type\" always;\n</code></pre></p>"},{"location":"api/authentication/#next-steps","title":"Next Steps","text":"<ul> <li>API Reference - Full API documentation</li> <li>User Management - Managing users</li> <li>Security - Security best practices</li> </ul>"},{"location":"architecture/overview/","title":"Architecture Overview","text":"<p>NSBoot follows a modern, layered architecture designed for scalability and maintainability.</p>"},{"location":"architecture/overview/#high-level-architecture","title":"High-Level Architecture","text":"graph TB     subgraph \"Client Layer\"         C1[Client 1]         C2[Client 2]         C3[Client N]     end      subgraph \"Network Layer\"         DHCP[DHCP Server]         TFTP[TFTP Server]         PXE[PXE/iPXE]     end      subgraph \"Application Layer\"         WEB[Web UIVue.js 3]         API[REST APIOpenResty/Lua]         WS[WebSocketReal-time]     end      subgraph \"Storage Layer\"         ISCSI[iSCSI Target]         ZFS[ZFS Pool]         SNAP[Snapshots]     end      subgraph \"Monitoring Layer\"         PROM[Prometheus]         GRAF[Grafana]         ALERT[Alertmanager]     end      C1 &amp; C2 &amp; C3 --&gt; DHCP     C1 &amp; C2 &amp; C3 --&gt; TFTP     C1 &amp; C2 &amp; C3 --&gt; ISCSI      DHCP --&gt; PXE     TFTP --&gt; PXE      WEB --&gt; API     WEB --&gt; WS     API --&gt; ZFS     API --&gt; ISCSI     WS --&gt; API      ISCSI --&gt; ZFS     ZFS --&gt; SNAP      API --&gt; PROM     PROM --&gt; GRAF     PROM --&gt; ALERT      style WEB fill:#3b82f6     style API fill:#10b981     style ZFS fill:#f59e0b     style PROM fill:#ef4444"},{"location":"architecture/overview/#component-architecture","title":"Component Architecture","text":"graph LR     subgraph \"Frontend\"         V[Vue.js 3]         TS[TypeScript]         TW[Tailwind CSS]         P[Pinia]         VR[Vue Router]     end      subgraph \"Backend\"         OR[OpenResty]         L[Lua 5.3]         JWT[JWT Auth]         WSS[WebSocket]     end      subgraph \"Storage\"         ZP[ZFS Pool]         DS[Datasets]         SN[Snapshots]     end      V --&gt; TS     V --&gt; TW     V --&gt; P     V --&gt; VR      OR --&gt; L     L --&gt; JWT     L --&gt; WSS      ZP --&gt; DS     DS --&gt; SN      V -.HTTP/WS.-&gt; OR     OR -.ZFS CLI.-&gt; ZP      style V fill:#42b883     style OR fill:#00758f     style ZP fill:#f59e0b"},{"location":"architecture/overview/#data-flow","title":"Data Flow","text":"sequenceDiagram     participant C as Client     participant W as Web UI     participant A as API     participant Z as ZFS     participant I as iSCSI      C-&gt;&gt;W: Access Dashboard     W-&gt;&gt;A: GET /api/system/info     A-&gt;&gt;Z: zfs list     Z--&gt;&gt;A: Dataset info     A--&gt;&gt;W: JSON response     W--&gt;&gt;C: Render UI      C-&gt;&gt;W: Upload Image     W-&gt;&gt;A: POST /api/images/upload     A-&gt;&gt;Z: zfs receive     Z--&gt;&gt;A: Success     A--&gt;&gt;W: Upload complete      C-&gt;&gt;W: Boot Client     W-&gt;&gt;A: POST /api/clients/boot     A-&gt;&gt;I: Create iSCSI target     I-&gt;&gt;Z: Map ZFS volume     A--&gt;&gt;W: Target created     W--&gt;&gt;C: Boot initiated"},{"location":"architecture/overview/#boot-process-flow","title":"Boot Process Flow","text":"graph TD     START[Client Power On] --&gt; BIOS[BIOS/UEFI]     BIOS --&gt; NET[Network Boot]     NET --&gt; DHCP[DHCP Request]     DHCP --&gt; IP[Get IP + Boot Server]     IP --&gt; TFTP[TFTP Download iPXE]     TFTP --&gt; IPXE[iPXE Execution]     IPXE --&gt; ISCSI[Connect iSCSI Target]     ISCSI --&gt; ZFS[Mount ZFS Volume]     ZFS --&gt; BOOT[Boot OS]     BOOT --&gt; ONLINE[Client Online]      style START fill:#3b82f6     style ONLINE fill:#10b981"},{"location":"architecture/overview/#deployment-architecture","title":"Deployment Architecture","text":""},{"location":"architecture/overview/#docker-deployment","title":"Docker Deployment","text":"graph TB     subgraph \"Docker Host\"         subgraph \"NSBoot Container\"             NGINX[Nginx + OpenResty]             LUA[Lua API]             FRONT[Frontend Static]         end          subgraph \"Monitoring\"             PROM[Prometheus]             GRAF[Grafana]         end          VOL1[Volume: Images]         VOL2[Volume: Config]     end      NGINX --&gt; LUA     NGINX --&gt; FRONT     LUA --&gt; VOL1     LUA --&gt; VOL2      LUA -.metrics.-&gt; PROM     PROM --&gt; GRAF"},{"location":"architecture/overview/#kubernetes-deployment","title":"Kubernetes Deployment","text":"graph TB     subgraph \"Kubernetes Cluster\"         ING[Ingress]          subgraph \"NSBoot Namespace\"             SVC[Service]             POD1[Pod 1]             POD2[Pod 2]             PVC1[PVC: Images]             PVC2[PVC: Config]         end          subgraph \"Monitoring\"             PROM[Prometheus]             GRAF[Grafana]         end     end      ING --&gt; SVC     SVC --&gt; POD1     SVC --&gt; POD2     POD1 --&gt; PVC1     POD2 --&gt; PVC1     POD1 --&gt; PVC2      POD1 -.metrics.-&gt; PROM     POD2 -.metrics.-&gt; PROM     PROM --&gt; GRAF"},{"location":"architecture/overview/#security-architecture","title":"Security Architecture","text":"graph LR     subgraph \"External\"         USER[User]         CLIENT[Client]     end      subgraph \"Security Layer\"         FW[Firewall]         TLS[TLS/HTTPS]         JWT[JWT Auth]         RBAC[RBAC]     end      subgraph \"Application\"         API[API]         DATA[Data]     end      USER --&gt; FW     FW --&gt; TLS     TLS --&gt; JWT     JWT --&gt; RBAC     RBAC --&gt; API     API --&gt; DATA      CLIENT --&gt; FW      style FW fill:#ef4444     style JWT fill:#f59e0b     style RBAC fill:#10b981"},{"location":"architecture/overview/#storage-architecture","title":"Storage Architecture","text":"graph TB     subgraph \"ZFS Pool\"         ROOT[nsboot0]          subgraph \"Datasets\"             IMG[images/]             STOR[storages/]             BOOT[boot/]             SNAP[snapshots/]         end     end      ROOT --&gt; IMG     ROOT --&gt; STOR     ROOT --&gt; BOOT     ROOT --&gt; SNAP      STOR -.snapshot.-&gt; SNAP      subgraph \"Features\"         COMP[Compression: LZ4]         DEDUP[Deduplication]         ARC[ARC Cache]     end      ROOT --&gt; COMP     ROOT --&gt; DEDUP     ROOT --&gt; ARC      style ROOT fill:#f59e0b     style SNAP fill:#3b82f6"},{"location":"architecture/overview/#api-architecture","title":"API Architecture","text":"graph TB     subgraph \"API Layer\"         ROUTER[Router]          subgraph \"Modules\"             AUTH[Auth Module]             SYS[System Module]             IMG[Images Module]             CLI[Clients Module]             SNAP[Snapshots Module]             SET[Settings Module]         end          subgraph \"Middleware\"             JWT[JWT Verify]             CORS[CORS]             RATE[Rate Limit]             LOG[Logging]         end     end      ROUTER --&gt; JWT     JWT --&gt; CORS     CORS --&gt; RATE     RATE --&gt; LOG      LOG --&gt; AUTH     LOG --&gt; SYS     LOG --&gt; IMG     LOG --&gt; CLI     LOG --&gt; SNAP     LOG --&gt; SET      style ROUTER fill:#3b82f6     style JWT fill:#f59e0b"},{"location":"architecture/overview/#monitoring-architecture","title":"Monitoring Architecture","text":"graph LR     subgraph \"Metrics Sources\"         APP[Application]         NODE[Node Exporter]         ZFS[ZFS Exporter]         NGINX[Nginx Exporter]     end      subgraph \"Collection\"         PROM[Prometheus]     end      subgraph \"Visualization\"         GRAF[Grafana]     end      subgraph \"Alerting\"         ALERT[Alertmanager]         EMAIL[Email]         SLACK[Slack]     end      APP --&gt; PROM     NODE --&gt; PROM     ZFS --&gt; PROM     NGINX --&gt; PROM      PROM --&gt; GRAF     PROM --&gt; ALERT      ALERT --&gt; EMAIL     ALERT --&gt; SLACK      style PROM fill:#ef4444     style GRAF fill:#f59e0b"},{"location":"architecture/overview/#technology-stack","title":"Technology Stack","text":""},{"location":"architecture/overview/#frontend","title":"Frontend","text":"<ul> <li>Framework: Vue.js 3.4 (Composition API)</li> <li>Language: TypeScript 5.4</li> <li>Styling: Tailwind CSS 3.4</li> <li>State: Pinia 2.1</li> <li>Router: Vue Router 4.x</li> <li>Charts: Chart.js 4.4</li> <li>Build: Vite 5.1</li> </ul>"},{"location":"architecture/overview/#backend","title":"Backend","text":"<ul> <li>Server: OpenResty (Nginx + LuaJIT)</li> <li>Language: Lua 5.3</li> <li>JSON: lua-cjson</li> <li>HTTP: lua-resty-http</li> <li>JWT: lua-resty-jwt</li> <li>WebSocket: lua-resty-websocket</li> </ul>"},{"location":"architecture/overview/#storage","title":"Storage","text":"<ul> <li>Filesystem: ZFS 2.1+</li> <li>Block Storage: iSCSI (tgt), NBD</li> <li>Compression: LZ4, GZIP, ZSTD</li> <li>Snapshots: ZFS native</li> </ul>"},{"location":"architecture/overview/#network","title":"Network","text":"<ul> <li>Boot: PXE, iPXE, UEFI</li> <li>DHCP: isc-dhcp-server</li> <li>TFTP: tftpd-hpa</li> <li>Protocol: iSCSI, NBD</li> </ul>"},{"location":"architecture/overview/#monitoring","title":"Monitoring","text":"<ul> <li>Metrics: Prometheus 2.x</li> <li>Visualization: Grafana 10.x</li> <li>Alerting: Alertmanager</li> <li>Exporters: Node, ZFS, Nginx</li> </ul>"},{"location":"architecture/overview/#devops","title":"DevOps","text":"<ul> <li>Container: Docker 24.0+</li> <li>Orchestration: Kubernetes 1.24+</li> <li>Package: Helm 3.0+</li> <li>CI/CD: GitHub Actions</li> </ul>"},{"location":"architecture/overview/#design-principles","title":"Design Principles","text":""},{"location":"architecture/overview/#1-separation-of-concerns","title":"1. Separation of Concerns","text":"<ul> <li>Frontend handles UI/UX</li> <li>Backend handles business logic</li> <li>Storage handles data persistence</li> </ul>"},{"location":"architecture/overview/#2-api-first-design","title":"2. API-First Design","text":"<ul> <li>RESTful API for all operations</li> <li>WebSocket for real-time updates</li> <li>OpenAPI documentation</li> </ul>"},{"location":"architecture/overview/#3-scalability","title":"3. Scalability","text":"<ul> <li>Horizontal scaling via Kubernetes</li> <li>Stateless API design</li> <li>Distributed storage with ZFS</li> </ul>"},{"location":"architecture/overview/#4-security","title":"4. Security","text":"<ul> <li>JWT authentication</li> <li>HTTPS/TLS encryption</li> <li>Role-based access control</li> <li>Security headers</li> </ul>"},{"location":"architecture/overview/#5-observability","title":"5. Observability","text":"<ul> <li>Prometheus metrics</li> <li>Structured logging</li> <li>Distributed tracing (future)</li> <li>Health checks</li> </ul>"},{"location":"architecture/overview/#6-developer-experience","title":"6. Developer Experience","text":"<ul> <li>TypeScript for type safety</li> <li>Hot reload in development</li> <li>Comprehensive documentation</li> <li>Easy local setup</li> </ul>"},{"location":"architecture/overview/#performance-characteristics","title":"Performance Characteristics","text":""},{"location":"architecture/overview/#latency","title":"Latency","text":"<ul> <li>API response: &lt;100ms (p95)</li> <li>Page load: &lt;2s</li> <li>WebSocket latency: &lt;50ms</li> <li>Boot time: &lt;30s per client</li> </ul>"},{"location":"architecture/overview/#throughput","title":"Throughput","text":"<ul> <li>API requests: 1000 req/s</li> <li>Concurrent boots: 100 clients</li> <li>ZFS IOPS: &gt;10,000</li> <li>Network: 10 Gbps</li> </ul>"},{"location":"architecture/overview/#scalability","title":"Scalability","text":"<ul> <li>Clients: 1000+ per server</li> <li>Images: Unlimited (storage limited)</li> <li>Concurrent users: 100+</li> <li>Kubernetes pods: Auto-scale</li> </ul>"},{"location":"architecture/overview/#next-steps","title":"Next Steps","text":"<ul> <li>Component Details</li> <li>Data Models</li> <li>API Design</li> <li>Deployment</li> </ul>"},{"location":"deployment/docker-deployment/","title":"Docker Deployment Guide","text":"<p>This guide covers deploying NSBoot using Docker and Docker Compose.</p>"},{"location":"deployment/docker-deployment/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker 20.10+</li> <li>Docker Compose 2.0+</li> <li>16GB RAM minimum</li> <li>100GB disk space</li> </ul>"},{"location":"deployment/docker-deployment/#quick-start","title":"Quick Start","text":""},{"location":"deployment/docker-deployment/#1-clone-repository","title":"1. Clone Repository","text":"<pre><code>git clone https://github.com/vkornilyev1988/NSBoot-.git\ncd NSBoot-\n</code></pre>"},{"location":"deployment/docker-deployment/#2-build-docker-image","title":"2. Build Docker Image","text":"<pre><code># Using build script\nchmod +x scripts/build-docker.sh\n./scripts/build-docker.sh\n\n# Or manually\ndocker build -t nsboot:4.1.0 .\n</code></pre>"},{"location":"deployment/docker-deployment/#3-start-with-docker-compose","title":"3. Start with Docker Compose","text":"<pre><code>docker-compose up -d\n</code></pre>"},{"location":"deployment/docker-deployment/#4-access-web-interface","title":"4. Access Web Interface","text":"<p>Open your browser to: <pre><code>http://localhost\n</code></pre></p>"},{"location":"deployment/docker-deployment/#docker-compose-configuration","title":"Docker Compose Configuration","text":"<p>The <code>docker-compose.yml</code> includes:</p> <ul> <li>nsboot: Main application server</li> <li>prometheus: Metrics collection</li> <li>grafana: Monitoring dashboards</li> <li>keycloak: Authentication (optional)</li> </ul>"},{"location":"deployment/docker-deployment/#basic-setup","title":"Basic Setup","text":"<pre><code>version: '3.8'\n\nservices:\n  nsboot:\n    image: nsboot:4.1.0\n    container_name: nsboot\n    privileged: true\n    network_mode: host\n    volumes:\n      - nsboot-data:/srv/images\n      - nsboot-config:/srv/nsboot/cfg\n    environment:\n      - TZ=UTC\n    restart: unless-stopped\n</code></pre>"},{"location":"deployment/docker-deployment/#with-monitoring","title":"With Monitoring","text":"<pre><code># Start with monitoring\ndocker-compose up -d\n\n# Access services\n# Web UI:     http://localhost\n# Grafana:    http://localhost:3000\n# Prometheus: http://localhost:9090\n</code></pre>"},{"location":"deployment/docker-deployment/#environment-variables","title":"Environment Variables","text":"<p>Configure NSBoot with environment variables:</p> <pre><code># Server configuration\nNSBOOT_HOSTNAME=nsboot-server\nNSBOOT_SERVER_IP=192.168.1.100\n\n# DHCP configuration\nNSBOOT_DHCP_ENABLED=true\nNSBOOT_DHCP_RANGE_START=192.168.1.150\nNSBOOT_DHCP_RANGE_END=192.168.1.200\n\n# ZFS configuration\nNSBOOT_ZFS_POOL=nsboot0\nNSBOOT_ZFS_COMPRESSION=lz4\n\n# Authentication\nNSBOOT_AUTH_ENABLED=false\n</code></pre>"},{"location":"deployment/docker-deployment/#volume-management","title":"Volume Management","text":""},{"location":"deployment/docker-deployment/#data-volumes","title":"Data Volumes","text":"<pre><code># List volumes\ndocker volume ls | grep nsboot\n\n# Backup volumes\ndocker run --rm -v nsboot-data:/data -v $(pwd):/backup \\\n  ubuntu tar czf /backup/nsboot-data-backup.tar.gz /data\n\n# Restore volumes\ndocker run --rm -v nsboot-data:/data -v $(pwd):/backup \\\n  ubuntu tar xzf /backup/nsboot-data-backup.tar.gz -C /\n</code></pre>"},{"location":"deployment/docker-deployment/#persistent-storage","title":"Persistent Storage","text":"<p>For production, use bind mounts:</p> <pre><code>services:\n  nsboot:\n    volumes:\n      - /srv/nsboot/images:/srv/images\n      - /srv/nsboot/config:/srv/nsboot/cfg\n</code></pre>"},{"location":"deployment/docker-deployment/#network-configuration","title":"Network Configuration","text":""},{"location":"deployment/docker-deployment/#host-network-mode","title":"Host Network Mode","text":"<p>For PXE/DHCP to work, use host network mode:</p> <pre><code>services:\n  nsboot:\n    network_mode: host\n</code></pre>"},{"location":"deployment/docker-deployment/#bridge-network-mode","title":"Bridge Network Mode","text":"<p>For isolated testing:</p> <pre><code>services:\n  nsboot:\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    networks:\n      - nsboot-net\n\nnetworks:\n  nsboot-net:\n    driver: bridge\n</code></pre>"},{"location":"deployment/docker-deployment/#security","title":"Security","text":""},{"location":"deployment/docker-deployment/#run-as-non-root","title":"Run as Non-Root","text":"<pre><code>USER www-data\n</code></pre>"},{"location":"deployment/docker-deployment/#read-only-root-filesystem","title":"Read-Only Root Filesystem","text":"<pre><code>services:\n  nsboot:\n    read_only: true\n    tmpfs:\n      - /tmp\n      - /var/run\n</code></pre>"},{"location":"deployment/docker-deployment/#resource-limits","title":"Resource Limits","text":"<pre><code>services:\n  nsboot:\n    deploy:\n      resources:\n        limits:\n          cpus: '4'\n          memory: 16G\n        reservations:\n          cpus: '2'\n          memory: 8G\n</code></pre>"},{"location":"deployment/docker-deployment/#health-checks","title":"Health Checks","text":"<pre><code>services:\n  nsboot:\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 40s\n</code></pre>"},{"location":"deployment/docker-deployment/#logging","title":"Logging","text":""},{"location":"deployment/docker-deployment/#configure-logging-driver","title":"Configure Logging Driver","text":"<pre><code>services:\n  nsboot:\n    logging:\n      driver: \"json-file\"\n      options:\n        max-size: \"10m\"\n        max-file: \"3\"\n</code></pre>"},{"location":"deployment/docker-deployment/#view-logs","title":"View Logs","text":"<pre><code># View all logs\ndocker-compose logs -f\n\n# View specific service\ndocker-compose logs -f nsboot\n\n# Last 100 lines\ndocker-compose logs --tail=100 nsboot\n</code></pre>"},{"location":"deployment/docker-deployment/#updating","title":"Updating","text":""},{"location":"deployment/docker-deployment/#update-to-new-version","title":"Update to New Version","text":"<pre><code># Pull new image\ndocker pull nsboot:4.1.1\n\n# Update docker-compose.yml\n# Change image: nsboot:4.1.1\n\n# Restart services\ndocker-compose up -d\n</code></pre>"},{"location":"deployment/docker-deployment/#rolling-update","title":"Rolling Update","text":"<pre><code># Build new image\ndocker build -t nsboot:4.1.1 .\n\n# Update with zero downtime\ndocker-compose up -d --no-deps --build nsboot\n</code></pre>"},{"location":"deployment/docker-deployment/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/docker-deployment/#container-wont-start","title":"Container Won't Start","text":"<pre><code># Check logs\ndocker-compose logs nsboot\n\n# Check container status\ndocker-compose ps\n\n# Inspect container\ndocker inspect nsboot\n</code></pre>"},{"location":"deployment/docker-deployment/#network-issues","title":"Network Issues","text":"<pre><code># Check network\ndocker network ls\ndocker network inspect nsboot_default\n\n# Test connectivity\ndocker exec nsboot ping -c 3 8.8.8.8\n</code></pre>"},{"location":"deployment/docker-deployment/#permission-issues","title":"Permission Issues","text":"<pre><code># Fix permissions\ndocker exec nsboot chown -R www-data:www-data /srv/images\n</code></pre>"},{"location":"deployment/docker-deployment/#zfs-not-available","title":"ZFS Not Available","text":"<pre><code># Install ZFS on host\nsudo apt install zfsutils-linux\n\n# Load ZFS module\nsudo modprobe zfs\n\n# Create pool\nsudo zpool create -m /srv nsboot0 /dev/sdX\n</code></pre>"},{"location":"deployment/docker-deployment/#performance-tuning","title":"Performance Tuning","text":""},{"location":"deployment/docker-deployment/#optimize-docker","title":"Optimize Docker","text":"<pre><code># Enable BuildKit\nexport DOCKER_BUILDKIT=1\n\n# Use layer caching\ndocker build --cache-from nsboot:latest -t nsboot:4.1.0 .\n</code></pre>"},{"location":"deployment/docker-deployment/#optimize-zfs","title":"Optimize ZFS","text":"<pre><code># Run inside container\ndocker exec nsboot /opt/nsboot/scripts/zfs-tune.sh\n</code></pre>"},{"location":"deployment/docker-deployment/#production-checklist","title":"Production Checklist","text":"<ul> <li>[ ] Use specific image tags (not <code>latest</code>)</li> <li>[ ] Configure resource limits</li> <li>[ ] Set up health checks</li> <li>[ ] Configure logging</li> <li>[ ] Use persistent volumes</li> <li>[ ] Enable monitoring</li> <li>[ ] Set up backups</li> <li>[ ] Configure SSL/TLS</li> <li>[ ] Enable authentication</li> <li>[ ] Set up firewall rules</li> </ul>"},{"location":"deployment/docker-deployment/#docker-registry","title":"Docker Registry","text":""},{"location":"deployment/docker-deployment/#push-to-docker-hub","title":"Push to Docker Hub","text":"<pre><code># Login\ndocker login\n\n# Tag image\ndocker tag nsboot:4.1.0 username/nsboot:4.1.0\n\n# Push\ndocker push username/nsboot:4.1.0\n</code></pre>"},{"location":"deployment/docker-deployment/#private-registry","title":"Private Registry","text":"<pre><code># Tag for private registry\ndocker tag nsboot:4.1.0 registry.example.com/nsboot:4.1.0\n\n# Push\ndocker push registry.example.com/nsboot:4.1.0\n</code></pre>"},{"location":"deployment/docker-deployment/#multi-architecture-builds","title":"Multi-Architecture Builds","text":"<pre><code># Create builder\ndocker buildx create --name nsboot-builder --use\n\n# Build for multiple architectures\ndocker buildx build \\\n  --platform linux/amd64,linux/arm64 \\\n  -t nsboot:4.1.0 \\\n  --push \\\n  .\n</code></pre>"},{"location":"deployment/docker-deployment/#next-steps","title":"Next Steps","text":"<ul> <li>Kubernetes Deployment</li> <li>Bare Metal Deployment</li> <li>Performance Tuning</li> <li>Security Hardening</li> </ul>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>This guide covers different installation methods for NSBoot.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing NSBoot, ensure you have:</p> <ul> <li>A server with Ubuntu 20.04+ or Debian 11+</li> <li>Root or sudo access</li> <li>At least 16GB RAM and 100GB storage</li> <li>Network connectivity</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#method-1-docker-recommended","title":"Method 1: Docker (Recommended)","text":"<p>The easiest way to get started with NSBoot is using Docker.</p>"},{"location":"getting-started/installation/#install-docker","title":"Install Docker","text":"<pre><code># Update package index\nsudo apt update\n\n# Install Docker\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\n\n# Install Docker Compose\nsudo apt install docker-compose-plugin\n</code></pre>"},{"location":"getting-started/installation/#deploy-nsboot","title":"Deploy NSBoot","text":"<pre><code># Clone the repository\ngit clone https://github.com/vkornilyev1988/NSBoot-.git\ncd NSBoot-\n\n# Start services\ndocker compose up -d\n\n# Check status\ndocker compose ps\n</code></pre>"},{"location":"getting-started/installation/#access-the-web-interface","title":"Access the Web Interface","text":"<p>Open your browser and navigate to: <pre><code>http://&lt;server-ip&gt;\n</code></pre></p> <p>Default credentials (if authentication is enabled): - Username: <code>admin</code> - Password: <code>nsboot_admin</code></p>"},{"location":"getting-started/installation/#method-2-bare-metal-installation","title":"Method 2: Bare Metal Installation","text":"<p>For production deployments, you may want to install directly on the host.</p>"},{"location":"getting-started/installation/#install-dependencies","title":"Install Dependencies","text":"<pre><code># Update system\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Install required packages\nsudo apt install -y \\\n    zfsutils-linux \\\n    nginx-extras \\\n    lua5.3 \\\n    lua-json \\\n    lua-socket \\\n    lua-posix \\\n    luarocks \\\n    isc-dhcp-server \\\n    tftpd-hpa \\\n    tgt \\\n    etherwake \\\n    shellinabox \\\n    qemu-utils \\\n    git\n\n# Install Lua dependencies\nsudo luarocks install lua-resty-http\nsudo luarocks install lua-resty-jwt\nsudo luarocks install lua-cjson\nsudo luarocks install luafilesystem\n</code></pre>"},{"location":"getting-started/installation/#clone-and-configure","title":"Clone and Configure","text":"<pre><code># Clone repository\ncd /opt\nsudo git clone https://github.com/vkornilyev1988/NSBoot-.git nsboot\ncd nsboot\n\n# Set permissions\nsudo chown -R www-data:www-data /opt/nsboot\n</code></pre>"},{"location":"getting-started/installation/#create-zfs-pool","title":"Create ZFS Pool","text":"<p>Important</p> <p>Replace <code>/dev/sdX</code> with your actual disk device. This will destroy all data on the disk!</p> <pre><code># Create ZFS pool\nsudo zpool create -m /srv nsboot0 /dev/sdX\n\n# Create datasets\nsudo zfs create -o mountpoint=/srv/images nsboot0/images\nsudo zfs create -o mountpoint=/srv/images/boot nsboot0/images/boot\nsudo zfs create -o mountpoint=/srv/images/boot/snap nsboot0/images/boot/snap\nsudo zfs create -o mountpoint=/srv/images/games nsboot0/images/games\nsudo zfs create -o mountpoint=/srv/images/snap nsboot0/images/snap\nsudo zfs create -o mountpoint=/srv/images/storages nsboot0/images/storages\nsudo zfs create nsboot0/writeback\n\n# Enable compression\nsudo zfs set compression=lz4 nsboot0/images\n\n# Set permissions\nsudo chown -R www-data:www-data /srv/images\n</code></pre>"},{"location":"getting-started/installation/#configure-nginx","title":"Configure Nginx","text":"<pre><code># Copy Nginx configuration\nsudo cp nginx/nsboot.conf /etc/nginx/sites-available/nsboot\nsudo ln -s /etc/nginx/sites-available/nsboot /etc/nginx/sites-enabled/\nsudo rm -f /etc/nginx/sites-enabled/default\n\n# Test configuration\nsudo nginx -t\n\n# Restart Nginx\nsudo systemctl restart nginx\n</code></pre>"},{"location":"getting-started/installation/#configure-dhcp","title":"Configure DHCP","text":"<pre><code># Backup original config\nsudo cp /etc/dhcp/dhcpd.conf /etc/dhcp/dhcpd.conf.backup\n\n# Copy example configuration\nsudo cp examples/etc/dhcp/dhcpd.conf /etc/dhcp/dhcpd.conf\n\n# Edit configuration\nsudo nano /etc/dhcp/dhcpd.conf\n</code></pre> <p>Update the following settings: <pre><code>subnet 192.168.1.0 netmask 255.255.255.0 {\n    range 192.168.1.150 192.168.1.200;\n    option routers 192.168.1.1;\n    option domain-name-servers 8.8.8.8, 8.8.4.4;\n    next-server 192.168.1.100;  # Your NSBoot server IP\n    filename \"ipxe.efi\";\n}\n</code></pre></p> <pre><code># Restart DHCP server\nsudo systemctl restart isc-dhcp-server\n</code></pre>"},{"location":"getting-started/installation/#configure-tftp","title":"Configure TFTP","text":"<pre><code># Create TFTP directory\nsudo mkdir -p /srv/tftp\n\n# Copy iPXE files\nsudo cp -r src/ipxe/* /srv/tftp/\n\n# Set permissions\nsudo chown -R tftp:tftp /srv/tftp\n\n# Configure TFTP\nsudo nano /etc/default/tftpd-hpa\n</code></pre> <p>Set: <pre><code>TFTP_USERNAME=\"tftp\"\nTFTP_DIRECTORY=\"/srv/tftp\"\nTFTP_ADDRESS=\"0.0.0.0:69\"\nTFTP_OPTIONS=\"--secure\"\n</code></pre></p> <pre><code># Restart TFTP\nsudo systemctl restart tftpd-hpa\n</code></pre>"},{"location":"getting-started/installation/#start-nsboot-daemon","title":"Start NSBoot Daemon","text":"<pre><code># Create systemd service\nsudo cat &gt; /etc/systemd/system/nsbootd.service &lt;&lt;EOF\n[Unit]\nDescription=NSBoot Daemon\nAfter=network.target zfs-mount.service\n\n[Service]\nType=simple\nExecStart=/opt/nsboot/bin/server.lua\nRestart=always\nUser=root\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Enable and start service\nsudo systemctl daemon-reload\nsudo systemctl enable nsbootd\nsudo systemctl start nsbootd\n</code></pre>"},{"location":"getting-started/installation/#method-3-kubernetes","title":"Method 3: Kubernetes","text":"<p>For large-scale deployments, use Kubernetes with Helm.</p> <pre><code># Add NSBoot Helm repository\nhelm repo add nsboot https://nsboot.github.io/helm-charts\nhelm repo update\n\n# Install NSBoot\nhelm install nsboot nsboot/nsboot \\\n    --namespace nsboot \\\n    --create-namespace \\\n    --set persistence.enabled=true \\\n    --set persistence.size=500Gi\n\n# Check status\nkubectl get pods -n nsboot\n</code></pre>"},{"location":"getting-started/installation/#post-installation","title":"Post-Installation","text":""},{"location":"getting-started/installation/#verify-installation","title":"Verify Installation","text":"<pre><code># Check services\nsudo systemctl status nginx\nsudo systemctl status isc-dhcp-server\nsudo systemctl status tftpd-hpa\nsudo systemctl status nsbootd\n\n# Check ZFS pool\nsudo zpool status\nsudo zfs list\n\n# Check iSCSI target\nsudo tgtadm --lld iscsi --op show --mode target\n</code></pre>"},{"location":"getting-started/installation/#access-web-interface","title":"Access Web Interface","text":"<p>Navigate to <code>http://&lt;server-ip&gt;</code> in your browser. You should see the NSBoot dashboard.</p>"},{"location":"getting-started/installation/#configure-firewall","title":"Configure Firewall","text":"<pre><code># Allow required ports\nsudo ufw allow 80/tcp    # HTTP\nsudo ufw allow 443/tcp   # HTTPS\nsudo ufw allow 67/udp    # DHCP\nsudo ufw allow 69/udp    # TFTP\nsudo ufw allow 3260/tcp  # iSCSI\nsudo ufw allow 9100/tcp  # Prometheus metrics\n\n# Enable firewall\nsudo ufw enable\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Quick Start Guide - Create your first boot image</li> <li>Configuration - Customize NSBoot settings</li> <li>Managing Images - Upload and manage OS images</li> <li>Managing Clients - Add client workstations</li> </ul>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues during installation, see the Troubleshooting Guide.</p>"},{"location":"getting-started/quick-start/","title":"Quick Start Guide","text":"<p>Get NSBoot up and running in 15 minutes!</p>"},{"location":"getting-started/quick-start/#step-1-start-nsboot","title":"Step 1: Start NSBoot","text":"DockerBare Metal <pre><code>docker compose up -d\n</code></pre> <pre><code>sudo systemctl start nsbootd\nsudo systemctl start nginx\nsudo systemctl start isc-dhcp-server\n</code></pre>"},{"location":"getting-started/quick-start/#step-2-access-web-interface","title":"Step 2: Access Web Interface","text":"<p>Open your browser and navigate to: <pre><code>http://&lt;server-ip&gt;\n</code></pre></p> <p>You should see the NSBoot dashboard.</p>"},{"location":"getting-started/quick-start/#step-3-upload-an-os-image","title":"Step 3: Upload an OS Image","text":""},{"location":"getting-started/quick-start/#prepare-your-image","title":"Prepare Your Image","text":"<p>NSBoot supports multiple image formats: - ISO: Direct boot from ISO files - VHD/VHDX: Windows virtual hard disks - QCOW2: QEMU disk images - VMDK: VMware disk images</p>"},{"location":"getting-started/quick-start/#upload-via-web-ui","title":"Upload via Web UI","text":"<ol> <li>Click Images in the navigation menu</li> <li>Click Upload Image button</li> <li>Select your image file</li> <li>Choose the image type</li> <li>Click Upload</li> </ol>"},{"location":"getting-started/quick-start/#upload-via-cli","title":"Upload via CLI","text":"<pre><code># Copy image to storage directory\nsudo cp /path/to/windows10.vhdx /srv/images/storages/\n\n# Set permissions\nsudo chown www-data:www-data /srv/images/storages/windows10.vhdx\n</code></pre>"},{"location":"getting-started/quick-start/#step-4-create-a-client-configuration","title":"Step 4: Create a Client Configuration","text":""},{"location":"getting-started/quick-start/#via-web-ui","title":"Via Web UI","text":"<ol> <li>Click Clients in the navigation menu</li> <li>Click Add Client button</li> <li>Fill in the details:</li> <li>Hostname: <code>workstation-01</code></li> <li>MAC Address: <code>00:11:22:33:44:55</code></li> <li>IP Address: <code>192.168.1.150</code></li> <li>Image: Select your uploaded image</li> <li>Click Save</li> </ol>"},{"location":"getting-started/quick-start/#via-configuration-file","title":"Via Configuration File","text":"<p>Edit <code>/srv/nsboot/cfg/nsboot.json</code>:</p> <pre><code>{\n  \"clients\": [\n    {\n      \"hostname\": \"workstation-01\",\n      \"mac_address\": \"00:11:22:33:44:55\",\n      \"ip_address\": \"192.168.1.150\",\n      \"target_id\": 1,\n      \"image\": \"windows10.vhdx\",\n      \"enabled\": true\n    }\n  ]\n}\n</code></pre>"},{"location":"getting-started/quick-start/#step-5-configure-client-machine","title":"Step 5: Configure Client Machine","text":""},{"location":"getting-started/quick-start/#biosuefi-settings","title":"BIOS/UEFI Settings","text":"<p>On your client workstation:</p> <ol> <li>Enter BIOS/UEFI setup (usually F2, F12, or Del during boot)</li> <li>Enable Network Boot or PXE Boot</li> <li>Set boot order: Network boot first</li> <li>Save and exit</li> </ol>"},{"location":"getting-started/quick-start/#boot-the-client","title":"Boot the Client","text":"<ol> <li>Power on the client machine</li> <li>It should receive an IP from DHCP</li> <li>Download iPXE bootloader via TFTP</li> <li>Connect to iSCSI target</li> <li>Boot the OS image</li> </ol>"},{"location":"getting-started/quick-start/#step-6-verify-boot","title":"Step 6: Verify Boot","text":"<p>Watch the client boot process:</p> sequenceDiagram     participant C as Client     participant D as DHCP     participant T as TFTP     participant I as iSCSI     participant Z as ZFS      C-&gt;&gt;D: DHCP Request     D-&gt;&gt;C: IP + Boot Server     C-&gt;&gt;T: Request iPXE     T-&gt;&gt;C: Send iPXE     C-&gt;&gt;I: Connect iSCSI     I-&gt;&gt;Z: Mount Image     Z-&gt;&gt;I: Image Data     I-&gt;&gt;C: Disk Access     C-&gt;&gt;C: Boot OS"},{"location":"getting-started/quick-start/#step-7-create-a-snapshot-optional","title":"Step 7: Create a Snapshot (Optional)","text":"<p>After the client boots successfully, create a snapshot for backup:</p>"},{"location":"getting-started/quick-start/#via-web-ui_1","title":"Via Web UI","text":"<ol> <li>Go to Snapshots</li> <li>Click Create Snapshot</li> <li>Select the image</li> <li>Enter snapshot name: <code>clean-install</code></li> <li>Click Create</li> </ol>"},{"location":"getting-started/quick-start/#via-cli","title":"Via CLI","text":"<pre><code>sudo zfs snapshot nsboot0/images/storages/windows10.vhdx@clean-install\n</code></pre>"},{"location":"getting-started/quick-start/#common-boot-scenarios","title":"Common Boot Scenarios","text":""},{"location":"getting-started/quick-start/#scenario-1-windows-1011-diskless-boot","title":"Scenario 1: Windows 10/11 Diskless Boot","text":"<pre><code># 1. Create a VHD/VHDX image\nqemu-img create -f vhdx /srv/images/storages/win10.vhdx 60G\n\n# 2. Install Windows to the image (use another machine or VM)\n# 3. Upload to NSBoot\n# 4. Configure client to boot from this image\n</code></pre>"},{"location":"getting-started/quick-start/#scenario-2-linux-diskless-boot","title":"Scenario 2: Linux Diskless Boot","text":"<pre><code># 1. Create QCOW2 image\nqemu-img create -f qcow2 /srv/images/storages/ubuntu.qcow2 40G\n\n# 2. Install Ubuntu to the image\n# 3. Configure for network boot\n# 4. Upload to NSBoot\n</code></pre>"},{"location":"getting-started/quick-start/#scenario-3-multi-boot-setup","title":"Scenario 3: Multi-Boot Setup","text":"<p>Configure a client to boot from multiple images:</p> <pre><code>{\n  \"hostname\": \"workstation-01\",\n  \"boot_options\": [\n    {\n      \"name\": \"Windows 10\",\n      \"image\": \"windows10.vhdx\",\n      \"default\": true\n    },\n    {\n      \"name\": \"Ubuntu 22.04\",\n      \"image\": \"ubuntu.qcow2\"\n    },\n    {\n      \"name\": \"Windows 11 Gaming\",\n      \"image\": \"win11-gaming.vhdx\"\n    }\n  ]\n}\n</code></pre>"},{"location":"getting-started/quick-start/#testing-validation","title":"Testing &amp; Validation","text":""},{"location":"getting-started/quick-start/#check-client-connection","title":"Check Client Connection","text":"<pre><code># View active iSCSI sessions\nsudo tgtadm --lld iscsi --op show --mode target\n\n# Check ZFS I/O statistics\nsudo zpool iostat -v nsboot0 1\n</code></pre>"},{"location":"getting-started/quick-start/#monitor-performance","title":"Monitor Performance","text":"<p>Access the monitoring dashboard: <pre><code>http://&lt;server-ip&gt;/monitoring\n</code></pre></p> <p>Or Grafana: <pre><code>http://&lt;server-ip&gt;:3000\n</code></pre></p>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<p>Now that you have NSBoot running:</p> <ul> <li>Configure advanced settings</li> <li>Set up monitoring</li> <li>Optimize performance</li> <li>Configure security</li> </ul>"},{"location":"getting-started/quick-start/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/quick-start/#client-doesnt-boot","title":"Client doesn't boot","text":"<ol> <li>Check DHCP is running: <code>sudo systemctl status isc-dhcp-server</code></li> <li>Check TFTP is accessible: <code>tftp &lt;server-ip&gt; -c get ipxe.efi</code></li> <li>Check iSCSI target: <code>sudo tgtadm --lld iscsi --op show --mode target</code></li> </ol>"},{"location":"getting-started/quick-start/#slow-boot-times","title":"Slow boot times","text":"<ol> <li>Check network speed (should be Gigabit)</li> <li>Verify ZFS ARC cache: <code>arc_summary</code></li> <li>Consider adding L2ARC cache device</li> </ol>"},{"location":"getting-started/quick-start/#image-not-found","title":"Image not found","text":"<ol> <li>Verify image exists: <code>ls -lh /srv/images/storages/</code></li> <li>Check permissions: <code>sudo chown www-data:www-data /srv/images/storages/*</code></li> <li>Check ZFS mount: <code>zfs list</code></li> </ol> <p>For more help, see Troubleshooting Guide.</p>"},{"location":"troubleshooting/boot-issues/","title":"Boot Issues Troubleshooting","text":"<p>Common boot problems and solutions.</p>"},{"location":"troubleshooting/boot-issues/#client-wont-boot","title":"Client Won't Boot","text":""},{"location":"troubleshooting/boot-issues/#symptom","title":"Symptom","text":"<p>Client doesn't receive IP or boot from network.</p>"},{"location":"troubleshooting/boot-issues/#diagnosis","title":"Diagnosis","text":"<pre><code># Check DHCP server\nsudo systemctl status isc-dhcp-server\nsudo journalctl -u isc-dhcp-server -n 50\n\n# Check DHCP leases\ncat /var/lib/dhcp/dhcpd.leases\n\n# Monitor DHCP traffic\nsudo tcpdump -i eth0 port 67 or port 68\n</code></pre>"},{"location":"troubleshooting/boot-issues/#solutions","title":"Solutions","text":"<p>1. DHCP Not Running <pre><code>sudo systemctl start isc-dhcp-server\nsudo systemctl enable isc-dhcp-server\n</code></pre></p> <p>2. Wrong Network Interface <pre><code># Edit /etc/default/isc-dhcp-server\nINTERFACES=\"eth0\"  # Change to your interface\nsudo systemctl restart isc-dhcp-server\n</code></pre></p> <p>3. Firewall Blocking <pre><code>sudo ufw allow 67/udp\nsudo ufw allow 68/udp\nsudo ufw allow 69/udp\nsudo ufw allow 3260/tcp\n</code></pre></p>"},{"location":"troubleshooting/boot-issues/#tftp-download-fails","title":"TFTP Download Fails","text":""},{"location":"troubleshooting/boot-issues/#symptom_1","title":"Symptom","text":"<p>Client gets IP but fails to download boot files.</p>"},{"location":"troubleshooting/boot-issues/#diagnosis_1","title":"Diagnosis","text":"<pre><code># Check TFTP server\nsudo systemctl status tftpd-hpa\n\n# Test TFTP locally\ntftp localhost -c get ipxe.efi\n\n# Monitor TFTP traffic\nsudo tcpdump -i eth0 port 69\n</code></pre>"},{"location":"troubleshooting/boot-issues/#solutions_1","title":"Solutions","text":"<p>1. TFTP Not Running <pre><code>sudo systemctl start tftpd-hpa\nsudo systemctl enable tftpd-hpa\n</code></pre></p> <p>2. Missing Boot Files <pre><code># Check files exist\nls -la /srv/tftp/\n\n# Download iPXE if missing\ncd /srv/tftp\nwget http://boot.ipxe.org/ipxe.efi\nwget http://boot.ipxe.org/undionly.kpxe\n</code></pre></p> <p>3. Permission Issues <pre><code>sudo chown -R tftp:tftp /srv/tftp\nsudo chmod -R 755 /srv/tftp\n</code></pre></p>"},{"location":"troubleshooting/boot-issues/#iscsi-connection-fails","title":"iSCSI Connection Fails","text":""},{"location":"troubleshooting/boot-issues/#symptom_2","title":"Symptom","text":"<p>Client downloads boot files but can't connect to iSCSI.</p>"},{"location":"troubleshooting/boot-issues/#diagnosis_2","title":"Diagnosis","text":"<pre><code># Check iSCSI targets\nsudo tgtadm --lld iscsi --op show --mode target\n\n# Check connections\nsudo tgtadm --lld iscsi --op show --mode conn --tid 1\n\n# Monitor iSCSI traffic\nsudo tcpdump -i eth0 port 3260\n</code></pre>"},{"location":"troubleshooting/boot-issues/#solutions_2","title":"Solutions","text":"<p>1. No iSCSI Target <pre><code># Create target\nsudo tgtadm --lld iscsi --op new --mode target --tid 1 \\\n  -T iqn.2025-01.com.nsboot:target1\n\n# Add LUN\nsudo tgtadm --lld iscsi --op new --mode logicalunit --tid 1 --lun 1 \\\n  -b /dev/zvol/nsboot0/images/storages/win10\n\n# Allow all initiators\nsudo tgtadm --lld iscsi --op bind --mode target --tid 1 -I ALL\n</code></pre></p> <p>2. Target Service Not Running <pre><code>sudo systemctl start tgt\nsudo systemctl enable tgt\n</code></pre></p> <p>3. ZFS Volume Not Available <pre><code># Check ZFS volumes\nzfs list -t volume\n\n# Create volume if missing\nzfs create -V 50G nsboot0/images/storages/win10\n</code></pre></p>"},{"location":"troubleshooting/boot-issues/#slow-boot-performance","title":"Slow Boot Performance","text":""},{"location":"troubleshooting/boot-issues/#symptom_3","title":"Symptom","text":"<p>Boot takes longer than expected.</p>"},{"location":"troubleshooting/boot-issues/#diagnosis_3","title":"Diagnosis","text":"<pre><code># Check ZFS performance\nzpool iostat -v nsboot0 1\n\n# Check ARC hit rate\narc_summary | grep \"Hit Rate\"\n\n# Check network speed\niperf3 -s  # On server\niperf3 -c &lt;server-ip&gt;  # On client\n</code></pre>"},{"location":"troubleshooting/boot-issues/#solutions_3","title":"Solutions","text":"<p>1. Tune ZFS <pre><code>sudo /opt/nsboot/scripts/zfs-tune.sh\n</code></pre></p> <p>2. Add L2ARC Cache <pre><code># Add SSD as L2ARC\nsudo zpool add nsboot0 cache /dev/sdc\n</code></pre></p> <p>3. Increase ARC Size <pre><code># Set ARC max to 8GB\necho 8589934592 | sudo tee /sys/module/zfs/parameters/zfs_arc_max\n</code></pre></p> <p>4. Use 10GbE Network - Upgrade to 10 Gigabit Ethernet - Use quality network switches - Check cable quality</p>"},{"location":"troubleshooting/boot-issues/#image-corruption","title":"Image Corruption","text":""},{"location":"troubleshooting/boot-issues/#symptom_4","title":"Symptom","text":"<p>OS boots but crashes or has errors.</p>"},{"location":"troubleshooting/boot-issues/#diagnosis_4","title":"Diagnosis","text":"<pre><code># Check ZFS integrity\nzpool scrub nsboot0\nzpool status -v nsboot0\n\n# Check for errors\nzpool status | grep errors\n</code></pre>"},{"location":"troubleshooting/boot-issues/#solutions_4","title":"Solutions","text":"<p>1. Restore from Snapshot <pre><code># List snapshots\nzfs list -t snapshot\n\n# Rollback to snapshot\nzfs rollback nsboot0/images/storages/win10@clean\n</code></pre></p> <p>2. Verify Image Integrity <pre><code># Check image file\nqemu-img check /srv/images/storages/win10.qcow2\n\n# Repair if needed\nqemu-img check -r all /srv/images/storages/win10.qcow2\n</code></pre></p> <p>3. Re-upload Image - Delete corrupted image - Upload fresh copy - Create new snapshot</p>"},{"location":"troubleshooting/boot-issues/#memory-issues","title":"Memory Issues","text":""},{"location":"troubleshooting/boot-issues/#symptom_5","title":"Symptom","text":"<p>Server runs out of memory or becomes slow.</p>"},{"location":"troubleshooting/boot-issues/#diagnosis_5","title":"Diagnosis","text":"<pre><code># Check memory usage\nfree -h\ntop\n\n# Check ZFS ARC usage\narc_summary | grep \"ARC size\"\n</code></pre>"},{"location":"troubleshooting/boot-issues/#solutions_5","title":"Solutions","text":"<p>1. Limit ARC Size <pre><code># Set ARC max to 50% of RAM\nTOTAL_RAM=$(free -b | awk '/^Mem:/{print $2}')\nARC_MAX=$((TOTAL_RAM / 2))\necho $ARC_MAX | sudo tee /sys/module/zfs/parameters/zfs_arc_max\n</code></pre></p> <p>2. Add Swap <pre><code># Create 8GB swap\nsudo fallocate -l 8G /swapfile\nsudo chmod 600 /swapfile\nsudo mkswap /swapfile\nsudo swapon /swapfile\n</code></pre></p> <p>3. Upgrade RAM - Minimum: 16GB - Recommended: 32GB+ - For 100+ clients: 64GB+</p>"},{"location":"troubleshooting/boot-issues/#network-issues","title":"Network Issues","text":""},{"location":"troubleshooting/boot-issues/#symptom_6","title":"Symptom","text":"<p>Intermittent connectivity or packet loss.</p>"},{"location":"troubleshooting/boot-issues/#diagnosis_6","title":"Diagnosis","text":"<pre><code># Check network errors\nip -s link show eth0\n\n# Test connectivity\nping -c 100 &lt;client-ip&gt;\n\n# Check for packet loss\nmtr &lt;client-ip&gt;\n</code></pre>"},{"location":"troubleshooting/boot-issues/#solutions_6","title":"Solutions","text":"<p>1. Check Network Configuration <pre><code># Verify IP configuration\nip addr show\n\n# Check routing\nip route show\n\n# Test DNS\nnslookup google.com\n</code></pre></p> <p>2. Disable Network Offloading <pre><code># Disable TCP offload\nsudo ethtool -K eth0 tso off gso off gro off\n</code></pre></p> <p>3. Update Network Drivers <pre><code>sudo apt update\nsudo apt upgrade\n</code></pre></p>"},{"location":"troubleshooting/boot-issues/#permission-errors","title":"Permission Errors","text":""},{"location":"troubleshooting/boot-issues/#symptom_7","title":"Symptom","text":"<p>\"Permission denied\" errors in logs.</p>"},{"location":"troubleshooting/boot-issues/#diagnosis_7","title":"Diagnosis","text":"<pre><code># Check file permissions\nls -la /srv/images/\nls -la /srv/tftp/\n\n# Check process user\nps aux | grep nginx\nps aux | grep tgtd\n</code></pre>"},{"location":"troubleshooting/boot-issues/#solutions_7","title":"Solutions","text":"<p>1. Fix Ownership <pre><code>sudo chown -R www-data:www-data /srv/images\nsudo chown -R tftp:tftp /srv/tftp\n</code></pre></p> <p>2. Fix Permissions <pre><code>sudo chmod -R 755 /srv/images\nsudo chmod -R 755 /srv/tftp\n</code></pre></p> <p>3. SELinux Issues <pre><code># Check SELinux status\nsestatus\n\n# Set to permissive (temporary)\nsudo setenforce 0\n\n# Disable permanently\nsudo sed -i 's/SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config\n</code></pre></p>"},{"location":"troubleshooting/boot-issues/#docker-issues","title":"Docker Issues","text":""},{"location":"troubleshooting/boot-issues/#symptom_8","title":"Symptom","text":"<p>Container won't start or crashes.</p>"},{"location":"troubleshooting/boot-issues/#diagnosis_8","title":"Diagnosis","text":"<pre><code># Check container status\ndocker-compose ps\n\n# View logs\ndocker-compose logs nsboot\n\n# Check resources\ndocker stats\n</code></pre>"},{"location":"troubleshooting/boot-issues/#solutions_8","title":"Solutions","text":"<p>1. Restart Container <pre><code>docker-compose restart nsboot\n</code></pre></p> <p>2. Rebuild Image <pre><code>docker-compose build --no-cache nsboot\ndocker-compose up -d\n</code></pre></p> <p>3. Check Volumes <pre><code># List volumes\ndocker volume ls\n\n# Inspect volume\ndocker volume inspect nsboot_nsboot-data\n</code></pre></p> <p>4. Increase Resources <pre><code># In docker-compose.yml\nservices:\n  nsboot:\n    deploy:\n      resources:\n        limits:\n          memory: 16G\n          cpus: '4'\n</code></pre></p>"},{"location":"troubleshooting/boot-issues/#common-error-messages","title":"Common Error Messages","text":""},{"location":"troubleshooting/boot-issues/#no-bootable-device","title":"\"No bootable device\"","text":"<ul> <li>BIOS boot order incorrect</li> <li>Network boot not enabled</li> <li>DHCP not providing boot server</li> </ul>"},{"location":"troubleshooting/boot-issues/#pxe-e53-no-boot-filename-received","title":"\"PXE-E53: No boot filename received\"","text":"<ul> <li>DHCP configuration missing filename</li> <li>TFTP server not accessible</li> </ul>"},{"location":"troubleshooting/boot-issues/#connection-refused-iscsi","title":"\"Connection refused (iSCSI)\"","text":"<ul> <li>iSCSI target not created</li> <li>Firewall blocking port 3260</li> <li>Wrong initiator IQN</li> </ul>"},{"location":"troubleshooting/boot-issues/#inputoutput-error","title":"\"Input/output error\"","text":"<ul> <li>ZFS volume corruption</li> <li>Network connectivity issues</li> <li>Disk failure</li> </ul>"},{"location":"troubleshooting/boot-issues/#out-of-memory","title":"\"Out of memory\"","text":"<ul> <li>ZFS ARC too large</li> <li>Insufficient RAM</li> <li>Memory leak</li> </ul>"},{"location":"troubleshooting/boot-issues/#getting-help","title":"Getting Help","text":"<p>If you're still stuck:</p> <ol> <li> <p>Check Logs <pre><code>sudo journalctl -xe\ndocker-compose logs -f\n</code></pre></p> </li> <li> <p>Enable Debug Mode <pre><code># In nginx config\nerror_log /var/log/nginx/error.log debug;\n</code></pre></p> </li> <li> <p>Ask for Help</p> </li> <li>GitHub Issues</li> <li>Discussions</li> <li>Include: logs, configuration, error messages</li> </ol>"},{"location":"troubleshooting/boot-issues/#prevention","title":"Prevention","text":""},{"location":"troubleshooting/boot-issues/#regular-maintenance","title":"Regular Maintenance","text":"<pre><code># Weekly\nzpool scrub nsboot0\napt update &amp;&amp; apt upgrade\n\n# Monthly\nzfs list -t snapshot  # Review snapshots\ndf -h  # Check disk space\n\n# Quarterly\n./scripts/benchmark.sh  # Performance test\n</code></pre>"},{"location":"troubleshooting/boot-issues/#monitoring","title":"Monitoring","text":"<ul> <li>Set up Grafana alerts</li> <li>Monitor disk space</li> <li>Track boot success rate</li> <li>Review logs regularly</li> </ul>"},{"location":"troubleshooting/boot-issues/#backups","title":"Backups","text":"<pre><code># Backup configuration\ntar czf nsboot-config-$(date +%Y%m%d).tar.gz /srv/nsboot/cfg\n\n# Backup ZFS\nzfs snapshot nsboot0/images@backup-$(date +%Y%m%d)\nzfs send nsboot0/images@backup-$(date +%Y%m%d) | gzip &gt; backup.gz\n</code></pre>"}]}