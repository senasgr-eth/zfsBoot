# NSBoot Load Balancing Configuration
# Distributes load across multiple NSBoot instances

# Upstream backend servers
upstream nsboot_backend {
    # Load balancing method
    least_conn;  # Use least connections algorithm
    
    # Backend servers
    server nsboot-1:80 max_fails=3 fail_timeout=30s weight=1;
    server nsboot-2:80 max_fails=3 fail_timeout=30s weight=1;
    server nsboot-3:80 max_fails=3 fail_timeout=30s weight=1;
    
    # Health check
    keepalive 32;
    keepalive_timeout 60s;
}

# Upstream for WebSocket (sticky sessions)
upstream nsboot_websocket {
    # IP hash for sticky sessions
    ip_hash;
    
    server nsboot-1:80 max_fails=3 fail_timeout=30s;
    server nsboot-2:80 max_fails=3 fail_timeout=30s;
    server nsboot-3:80 max_fails=3 fail_timeout=30s;
    
    keepalive 32;
}

# Main server block
server {
    listen 80;
    listen [::]:80;
    server_name nsboot.example.com;
    
    # Logging
    access_log /var/log/nginx/nsboot-lb-access.log;
    error_log /var/log/nginx/nsboot-lb-error.log;
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login_limit:10m rate=5r/m;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    
    # Health check endpoint (local)
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # WebSocket endpoint (sticky sessions)
    location /ws {
        proxy_pass http://nsboot_websocket;
        
        # WebSocket upgrade
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeouts for long-lived connections
        proxy_connect_timeout 7d;
        proxy_send_timeout 7d;
        proxy_read_timeout 7d;
        
        # Buffering
        proxy_buffering off;
    }
    
    # API endpoints
    location /api/ {
        # Rate limiting
        limit_req zone=api_limit burst=20 nodelay;
        
        # Login endpoint has stricter limit
        location /api/auth/login {
            limit_req zone=login_limit burst=5 nodelay;
            proxy_pass http://nsboot_backend;
        }
        
        proxy_pass http://nsboot_backend;
        
        # Headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Buffering
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        
        # CORS
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization" always;
        
        if ($request_method = OPTIONS) {
            return 204;
        }
    }
    
    # Static files (cache and distribute)
    location / {
        proxy_pass http://nsboot_backend;
        
        # Headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        
        # Caching
        proxy_cache nsboot_cache;
        proxy_cache_valid 200 1h;
        proxy_cache_valid 404 1m;
        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
        proxy_cache_background_update on;
        proxy_cache_lock on;
        
        add_header X-Cache-Status $upstream_cache_status;
    }
    
    # Static assets with long cache
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        proxy_pass http://nsboot_backend;
        proxy_cache nsboot_cache;
        proxy_cache_valid 200 1y;
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Cache-Status $upstream_cache_status;
    }
}

# Cache configuration
proxy_cache_path /var/cache/nginx/nsboot levels=1:2 keys_zone=nsboot_cache:10m max_size=1g inactive=60m use_temp_path=off;

# HTTPS redirect (if SSL enabled)
server {
    listen 80;
    listen [::]:80;
    server_name nsboot.example.com;
    
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# HTTPS server
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name nsboot.example.com;
    
    # SSL certificates
    ssl_certificate /etc/ssl/certs/nsboot.crt;
    ssl_certificate_key /etc/ssl/private/nsboot.key;
    
    # SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # Include main configuration
    include /etc/nginx/sites-available/nsboot-lb-common.conf;
}
