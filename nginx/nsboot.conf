# NSBoot Nginx Configuration with OpenResty/Lua
# Modern API and web interface

# Lua package path
lua_package_path "/opt/nsboot/?.lua;/opt/nsboot/api/?.lua;;";
lua_shared_dict nsboot_cache 10m;

# Upstream for load balancing (if needed)
upstream nsboot_backend {
    server 127.0.0.1:8080;
    keepalive 32;
}

# Rate limiting
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=upload_limit:10m rate=1r/s;

server {
    listen 80 default_server;
    listen [::]:80 default_server;
    
    server_name _;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    
    # Logging
    access_log /var/log/nginx/nsboot-access.log;
    error_log /var/log/nginx/nsboot-error.log warn;
    
    # Root directory for static files
    root /opt/nsboot/frontend/dist;
    index index.html;
    
    # Client body size for image uploads
    client_max_body_size 10G;
    client_body_timeout 300s;
    
    # API endpoints
    location /api/ {
        limit_req zone=api_limit burst=20 nodelay;
        
        default_type application/json;
        
        # Use Lua router
        content_by_lua_block {
            local router = require("router")
            router.handle_request()
        }
    }
    
    # Metrics endpoint for Prometheus
    location /metrics {
        access_log off;
        
        content_by_lua_block {
            local api = require("api.init")
            ngx.header["Content-Type"] = "text/plain"
            ngx.say(api.get_metrics())
        }
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        
        content_by_lua_block {
            local api = require("api.init")
            api.json_response({
                status = "healthy",
                timestamp = os.time()
            })
        }
    }
    
    # Image upload endpoint
    location /api/images/upload {
        limit_req zone=upload_limit burst=2 nodelay;
        
        client_body_temp_path /tmp/nginx_upload;
        
        content_by_lua_block {
            ngx.req.read_body()
            
            local upload = require("resty.upload")
            local cjson = require("cjson")
            
            local chunk_size = 4096
            local form, err = upload:new(chunk_size)
            
            if not form then
                ngx.status = 500
                ngx.say(cjson.encode({error = "Failed to initialize upload"}))
                return
            end
            
            local file
            local filename
            
            while true do
                local typ, res, err = form:read()
                
                if not typ then
                    ngx.status = 500
                    ngx.say(cjson.encode({error = err}))
                    return
                end
                
                if typ == "header" then
                    if res[1] == "Content-Disposition" then
                        filename = res[2]:match('filename="(.+)"')
                        if filename then
                            file = io.open("/srv/images/storages/" .. filename, "w+")
                        end
                    end
                elseif typ == "body" then
                    if file then
                        file:write(res)
                    end
                elseif typ == "eof" then
                    if file then
                        file:close()
                    end
                    break
                end
            end
            
            ngx.say(cjson.encode({
                success = true,
                filename = filename,
                path = "/srv/images/storages/" .. filename
            }))
        }
    }
    
    # Static files for frontend
    location / {
        try_files $uri $uri/ /index.html;
        
        # Cache static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }
    
    # PXE boot files
    location /boot/ {
        alias /srv/tftp/;
        autoindex on;
    }
    
    # Deny access to sensitive files
    location ~ /\. {
        deny all;
    }
    
    location ~ \.lua$ {
        deny all;
    }
}

# HTTPS configuration (uncomment and configure SSL certificates)
# server {
#     listen 443 ssl http2;
#     listen [::]:443 ssl http2;
#     
#     server_name nsboot.local;
#     
#     ssl_certificate /etc/ssl/certs/nsboot.crt;
#     ssl_certificate_key /etc/ssl/private/nsboot.key;
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers HIGH:!aNULL:!MD5;
#     ssl_prefer_server_ciphers on;
#     
#     # Include all locations from HTTP server
#     include /etc/nginx/sites-available/nsboot-locations.conf;
# }
